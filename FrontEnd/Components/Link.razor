@using PlaidQuickstartBlazor.Shared
@inject ContextContainer context
@inject HttpClient Http
@inject IJSRuntime JS

@*
    LINK BUTTON

    Manages the Plaid Link control
    https://plaid.com/docs/link/web/

*@

@if (IsFixingToken)
{
    @* Needs to fit into a single container once we're already logged in *@
    
    <SingleContainer data-test-id="link-fix">
        <Header>
            <Note>Fix</Note>
        </Header>
        <Contents>
            <div class="endpointDescription">If you see errors using your token, you can try fixing it here.</div>

            @if (PrettyError is not null)
            {
                <Error ErrorContent="PrettyError"></Error>
            }
            else if (Error is not null)
            {
                <p class="alert-danger p-2 my-2">@Error</p>
            }
        </Contents>
        <Buttons>
            <button data-test-id="btn-fix" type="button" class="btn btn-secondary fixButton" @onclick="LaunchLink">
                Fix Token
            </button>
        </Buttons>
    </SingleContainer>
    <SingleContainer data-test-id="link-logout">
        <Header>
            <Note>Logout</Note>
        </Header>
        <Contents>
            <div class="endpointDescription">To change which bank you're connected to, log out first.</div>
        </Contents>
        <Buttons>
            <button data-test-id="btn-logout" type="button" class="btn btn-outline-secondary fixButton" @onclick="Logout">
                Logout
            </button>
        </Buttons>
    </SingleContainer>
}
else
{
    <div data-test-id="Link">
        @if (IsRendered)
        {
            <button data-test-id="launch-link" type="button" class="btn btn-primary" @onclick="LaunchLink">
                Launch Link &raquo;
            </button>
        }
        else
        {
            @*
                TODO: I would really prefer to enable this button, and hide the loading AFTER 
                the user clicks. Sadly, it seems onclick simply doesn't work during prerendering
            *@
            <button data-test-id="await-link" class="btn btn-primary" type="button" disabled>
                <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                Loading...
            </button>  
        }
        @if (PrettyError is not null)
        {
            <Error ErrorContent="PrettyError"></Error>
        }
        else if (Error is not null)
        {
            <p class="alert-danger p-2 my-2">@Error</p>
        }

    </div>
}

@code {

    /// <summary>
    /// Set to 'true' if Link should be launched in "Fix token" mode
    /// </summary>
    [Parameter]
    public bool IsFixingToken { get; set; }

    private PlaidWireError? PrettyError { get; set; }

    private string? Error { get; set; }

    private bool IsRendered { get; set; }

    private IJSObjectReference? module;

    private async Task Logout()
    {
        try
        {
            context.IsItemAccess = false;
            context.LinkSuccess = false;
            context.Credentials!.AccessToken = null;
            context.Credentials!.ItemId = null;

            var response = await Http.PostAsync("link/Logout",null);
            if (!response.IsSuccessStatusCode)
                throw new ApplicationException(await response.Content.ReadAsStringAsync());
        }
        catch (Exception ex)
        {
            Error = $"Failed to Logout: {ex.GetType().Name}: {ex.Message}";           
        }
    }

    private async Task LaunchLink()
    {
        try
        {
            Error = null;
            PrettyError = null;

            await LoadCredentialsAsync();
            if (NeedToLaunch())
            {
                var link_token = await CreateLinkTokenAsync();
                var link_result = await InvokeLinkJSAsync(link_token);
                await ExchangePublicTokenAsync(link_result);
            }

            context.LinkSuccess = true;
            context.IsItemAccess = true;
        }
        catch (Exception ex)
        {
            Error = $"Failed to Launch: {ex.GetType().Name}: {ex.Message}";
        }
    }

    private async Task LoadCredentialsAsync()
    {
        context.Credentials = await Http.GetFromJsonAsync<PlaidCredentials>("link/info");       
    }

    private bool NeedToLaunch()
    {
        return string.IsNullOrEmpty(context.Credentials?.AccessToken) || IsFixingToken;        
    }

    private async Task<string> CreateLinkTokenAsync()
    {
        var createresponse = await Http.GetAsync($"link/CreateLinkToken{(IsFixingToken?"?fix=true":"")}");
        if (!createresponse.IsSuccessStatusCode)
            throw new ApplicationException(await createresponse.Content.ReadAsStringAsync());

        var link_token = await createresponse.Content.ReadFromJsonAsync<string>();

        if (link_token is null)
            throw new ApplicationException("Failed to parse CreateLinkToken result");

        return link_token;
    }

    private async Task<LinkResult> InvokeLinkJSAsync(string link_token)
    {
        var result = await module!.InvokeAsync<string>("launch_link",link_token);

        if (result is null)
            throw new ApplicationException("Calling link failed");

        var link_result = System.Text.Json.JsonSerializer.Deserialize<LinkResult>(result);

        if (link_result is null)
            throw new ApplicationException("Failed to parse link result");

        if (link_result.ok != true)
        {
            await Http.PostAsJsonAsync<LinkResult>("link/LinkFail",link_result);

            // TODO: Create new PlaidErrorException which has a PlaidError as a payload
            if (link_result.error is not null)
            {
                PrettyError = link_result.error;
                throw new ApplicationException();
            }
            else
                throw new ApplicationException($"Link aborted. Status: {link_result.metadata?.status ?? "none"}");
        }

        return link_result;
    }

    private async Task ExchangePublicTokenAsync(LinkResult link_result)
    {
        var response = await Http.PostAsJsonAsync<LinkResult>("link/ExchangePublicToken",link_result);
        if (!response.IsSuccessStatusCode)
            throw new ApplicationException(await response.Content.ReadAsStringAsync());

        context.Credentials = await response.Content.ReadFromJsonAsync<PlaidCredentials>();           
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            if (firstRender)
            {
                IsRendered = true;
                StateHasChanged();

                module = await JS.InvokeAsync<IJSObjectReference>("import", "./Components/Link.razor.js");                            
            }
        }
        catch (Exception ex)
        {
            Error = $"Failed to Load JS {ex.GetType().Name}: {ex.Message}";            
        }
    }
}
